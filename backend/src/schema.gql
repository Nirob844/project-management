# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateProjectInput {
  description: String
  endDate: DateTime
  name: String!
  startDate: DateTime
  status: String
}

input CreateTaskInput {
  assigneeId: String
  description: String
  dueDate: DateTime
  parentTaskId: String
  priority: String
  projectId: String!
  status: String
  title: String!
}

input CreateUserDto {
  avatar: String
  email: String!
  name: String!
  password: String!
  role: String! = "USER"
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  addProjectMember(projectId: ID!, userId: ID!): Project!
  createProject(input: CreateProjectInput!): Project!
  createTask(input: CreateTaskInput!): Task!
  createUser(input: CreateUserDto!): User!
  deleteNotification(id: ID!): Notification!
  deleteProject(id: ID!): Project!
  deleteTask(id: ID!): Task!
  markAllNotificationsAsRead: Notification!
  markNotificationAsRead(id: ID!): Notification!
  removeProjectMember(projectId: ID!, userId: ID!): Project!
  removeUser(id: ID!): User!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  updateUser(id: ID!, input: UpdateUserDto!): User!
}

type Notification {
  createdAt: DateTime!
  data: String
  id: ID!
  isRead: Boolean!
  message: String!
  title: String!
  type: String!
  updatedAt: DateTime!
  userId: String!
}

type Project {
  createdAt: DateTime!
  description: String
  endDate: DateTime
  id: ID!
  members: [User!]!
  name: String!
  owner: User!
  progress: Float!
  startDate: DateTime
  status: String!
  tasks: [Task!]!
  updatedAt: DateTime!
}

type Query {
  me: User!
  myNotifications: [Notification!]!
  myProjects: [Project!]!
  project(id: ID!): Project!
  projects: [Project!]!
  task(id: ID!): Task!
  tasks: [Task!]!
  tasksByAssignee(assigneeId: ID!): [Task!]!
  tasksByProject(projectId: ID!): [Task!]!
  user(id: ID!): User!
  users: [User!]!
}

type Task {
  assigneeId: String
  createdAt: DateTime!
  dependencies: [String!]
  description: String!
  dueDate: DateTime!
  id: ID!
  parentTaskId: String
  priority: String!
  projectId: String!
  status: String!
  subtasks: [Task!]
  tags: [String!]
  title: String!
  updatedAt: DateTime!
}

input UpdateProjectInput {
  description: String
  endDate: DateTime
  name: String
  progress: Float
  startDate: DateTime
  status: String
}

input UpdateTaskInput {
  assigneeId: String
  description: String
  dueDate: DateTime
  parentTaskId: String
  priority: String
  projectId: String
  status: String
  title: String
}

input UpdateUserDto {
  avatar: String
  email: String
  isActive: Boolean
  name: String
  password: String
  role: String
}

type User {
  avatar: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  projectIds: [String!]
  role: String!
  taskIds: [String!]
  updatedAt: DateTime!
}